/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package proyectocompi2;
import java_cup.runtime.*;

import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

//Acciones predefinidas por el codigo proporcionado en la pagina de CUP
action code {:
    
HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
String currentHash;

public void imprimirTablaSimbolos(){
    for (String key: listaTablasSimbolos.keySet()) {
        System.out.println("Tabla de simbolos: " + key);
        System.out.println("Valores: ");
        for (String item : listaTablasSimbolos.get(key)){
            System.out.println(item);
        }
        System.out.println(item);
    }
}

:}

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

/* Se define la manera en que se conecta al scanner */
init with {: :};
scan with {: return lex.next_token(); :};

//Terminales de parentesis y llaves
terminal ABREREGALO, CIERRAREGALO, ABREEMPAQUE, CIERRAEMPAQUE, ABRECUENTO, CIERRACUENTO, SEPARAREGALO;

//Terminales de tipos
terminal t_float_santa, t_bool_colacho, t_string_nicolas, l_MINIREGALO, l_int_dedmoroz, t_arr_noel, t_int_sinterklass, l_float_padrenavidad;//

//Terminal de positivos enteros no cero


//Terminales relacionales
terminal e_jinglebell, ne_tinseltoes, g_merryberry, l_slinky, ge_snowflake, le_candycane;

//Terminal de finalizador
terminal FINREGALO;

//Terminales aritmeticos unarios de  decremento e incremento
terminal QUIEN, GRINCH;

//Terminales aritmeticos binarios
terminal sum_dasher, res_dancer, mul_prancer, div_int_vixen, div_float_blitzen, mod_comet, pow_cupid;

//Terminales operadores logicos
terminal not_gaspar, and_melchior, or_balthassar, l_fPAPANOEL, l_tPAPANOEL;

//Terminales estructuras de control (if, elif, else, for, do, until, return, break, while, switch)
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA, ESPERARASANTA, TRINEO;

//Terminales de identificador, entrega, return y ERROR
terminal PERSONA, NAVIDAD, INTEGER_LITERAL, ENTREGA, RETORNAREGALO, SINREGALO, FESTIVAL, LUCES, ARBOL, t_char_dedmoroz, l_string_nicolas, NATIVIDAD, ERROR;


//Terminales de lectura y escritura
terminal NARRA, ESCUCHA;

//No terminales palabras reservadas y tipos de datos 
non terminal tsantaclaus, tlsantaclaus; 

//No terminales de funciones
non terminal bolsaNavidena, bolsaNavidenaAux, defBolsaNavidena, bolsasNavidenas, codigoBolsaNavidena;

//No terminales de multiples parametros
non terminal paramBastoncitos, defParamBastoncito, expresionesBastoncitos, defExprBastoncito;

//No terminales de lineas y sentencias de codigo 
non terminal lineasDeNavidad, auxLineasDeNavidad, creaRegalo, asignaRegalo, asignaMultiplesRegalos; 

//No terminales de expresiones y asignaciones
non terminal exprRegalo, regaloManual, regalocompradoRelacional, regaloprinBinario, regaloprinUnario, pedirBolsaNavidena, printBolsaNavidena, readBolsaNavidena ;

//No terminales de estructuras de control 
non terminal pesebre, while_esperarasanta, condicion_esperarasanta, for_envuelve, do_hace, if_elfo, elif_hada_duende, elif_hada, def_elif_hada, else_duende;

/* No terminal Inicial */
non terminal navidad; 


/*Definicion del orden de las precedencias*/

precedence left res_dancer, sum_dasher;
precedence left div_int_vixen, div_float_blitzen, mul_prancer;
precedence left mod_comet, pow_cupid;

precedence left GRINCH,
                QUIEN;
                
precedence left le_candycane,
            ge_snowflake,
            ne_tinseltoes,
            e_jinglebell,
            l_slinky,
            g_merryberry;

precedence left and_melchior;
precedence left or_balthassar;
precedence left not_gaspar;


start with navidad;

//Simbolo inicial
navidad ::= {:
    System.out.println("\nNavidad.");
  :}  bolsaNavidena;

bolsaNavidena ::=  {:
    System.out.println("\nBolsa Navidena.");
  :}  bolsaNavidenaAux;

//Llamada recursiva para llamar 1 o mas funciones 
bolsaNavidenaAux ::= defBolsaNavidena | bolsaNavidenaAux defBolsaNavidena ;


//Definicion del tipo y llamado al codigo dentro de la funcion
defBolsaNavidena ::= bolsasNavidenas codigoBolsaNavidena ;

//Se definen tipos de funciones: main,void, tipo sin parametros y tipo con parametros 
bolsasNavidenas ::= FESTIVAL t_int_sinterklass ARBOL ABRECUENTO CIERRACUENTO 
					| FESTIVAL tsantaclaus PERSONA ABRECUENTO CIERRACUENTO 
					| FESTIVAL SINREGALO PERSONA ABRECUENTO CIERRACUENTO 
					| FESTIVAL tsantaclaus PERSONA ABRECUENTO paramBastoncitos CIERRACUENTO 
					| FESTIVAL SINREGALO PERSONA ABRECUENTO paramBastoncitos CIERRACUENTO 
                                        ;


//No terminal de palabras reservadas para Tipos de datos
tsantaclaus ::= 
	t_int_sinterklass:t {: RESULT = t; :} |
	t_float_santa:t {: RESULT = t; :}  |
	t_string_nicolas:t {: RESULT = t; :}  |
	t_bool_colacho:t {: RESULT = t; :}  |
	t_char_dedmoroz:t {: RESULT = t; :} ;


//No terminal de literales
tlsantaclaus ::=
	l_int_dedmoroz:l {: RESULT = l; :}  |
	l_float_padrenavidad:l {: RESULT = l; :}  |
	l_string_nicolas:l {: RESULT = l; :}  | 
	l_MINIREGALO:l {: RESULT = l; :}  |   
	l_tPAPANOEL:l {: RESULT = l; :}  | 
	l_fPAPANOEL:l {: RESULT = l; :} ;  

 

//Cuerpo de la funcion con las lineas de codigo entre corchetes {...}
codigoBolsaNavidena ::= ABREREGALO lineasDeNavidad CIERRAREGALO | ABREREGALO CIERRAREGALO; 


//Definicion recursiva para poder llamar varias lineas de Codigo
lineasDeNavidad ::= auxLineasDeNavidad | lineasDeNavidad auxLineasDeNavidad ;

//Distintos tipos de lineas que se pueden utilizar dentro de funciones incluyendo estructuras de control y asignaciones
auxLineasDeNavidad ::= creaRegalo FINREGALO | asignaRegalo FINREGALO
                        | pesebre
                        | exprRegalo FINREGALO
                        | PERSONA asignaMultiplesRegalos FINREGALO
                        | NARRA ABRECUENTO exprRegalo CIERRACUENTO FINREGALO
                        //print("",1,2,3)|
                        | NARRA ABRECUENTO l_string_nicolas SEPARAREGALO expresionesBastoncitos CIERRACUENTO FINREGALO
                                | RETORNAREGALO tlsantaclaus FINREGALO
                                | codigoBolsaNavidena
                                | CORTA FINREGALO ;

//Creacion, llamados y asignaciones a variables, incluyendo arreglos
//local int var; local int var = 2; local int arreglo [10]
creaRegalo ::= NATIVIDAD tsantaclaus PERSONA | NATIVIDAD tsantaclaus PERSONA ENTREGA exprRegalo
                | NATIVIDAD tsantaclaus PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE
                | NATIVIDAD tsantaclaus PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE ENTREGA exprRegalo
		| NATIVIDAD tsantaclaus PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE asignaMultiplesRegalos //ABREREGALO expresionesBastoncitos CIERRAREGALO
                ; // | PERSONA ;

asignaRegalo ::= PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE ENTREGA exprRegalo | PERSONA ENTREGA exprRegalo ;

asignaMultiplesRegalos ::= ENTREGA ABREREGALO expresionesBastoncitos CIERRAREGALO;

//Diferentes casos posibles de llamar a una funcion 
pedirBolsaNavidena ::= PERSONA ABRECUENTO CIERRACUENTO |
					   PERSONA ABRECUENTO expresionesBastoncitos CIERRACUENTO
					   | readBolsaNavidena ;//printBolsaNavidena ;//;


//Llamados de print (expresion) y ("", , ...)
//printBolsaNavidena ::= NARRA ABRECUENTO exprRegalo CIERRACUENTO;
//					| NARRA ABRECUENTO l_string_nicolas SEPARAREGALO expresionesBastoncitos CIERRACUENTO;

//Llamados de read con cero parametros y con el caso de que hayan uno o mas parametros 
readBolsaNavidena ::= ESCUCHA ABRECUENTO CIERRACUENTO | ESCUCHA ABRECUENTO expresionesBastoncitos CIERRACUENTO;


//Tipos de expresiones presentes en el lenguaje, incluyendo literales, asignaciones, multiples expresiones en parentesis 
//expresiones aritmeticas unarias/binarias, logicas, relacionales y llamados a funciones
exprRegalo ::=  tlsantaclaus | regalocompradoRelacional | regaloManual | regaloprinBinario | regaloprinUnario | PERSONA
                                | PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE 
                                | ABRECUENTO expresionesBastoncitos CIERRACUENTO
				| ABREEMPAQUE expresionesBastoncitos CIERRAEMPAQUE
                                | pedirBolsaNavidena; //


//Estructuras de control utilizadas en el lenguaje
pesebre ::= while_esperarasanta | for_envuelve  | do_hace | if_elfo ; //| switch_trineo 

//Definicien del do-while: do{...} until()|
do_hace ::= HACE ABREREGALO lineasDeNavidad CIERRAREGALO REVISA ABRECUENTO condicion_esperarasanta CIERRACUENTO FINREGALO
             | HACE ABREREGALO CIERRAREGALO REVISA ABRECUENTO condicion_esperarasanta CIERRACUENTO FINREGALO; 

//REVISA ABRECUENTO condicion_esperarasanta CIERRACUENTO FINREGALO 
//            HACE ABREREGALO CIERRAREGALO REVISA ABRECUENTO condicion_esperarasanta CIERRACUENTO FINREGALO ;


//Definicion del bucle while () {...}
while_esperarasanta ::= ESPERARASANTA ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO
                        | ESPERARASANTA ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO CIERRAREGALO ;

condicion_esperarasanta ::=  l_tPAPANOEL:l {: RESULT = l; :}  
                              |   l_fPAPANOEL:l {: RESULT = l; :} 
                        | regalocompradoRelacional;

//Definicion for(int i = 0; i < 4; i++){...}
for_envuelve ::= ENVUELVE ABRECUENTO asignaRegalo FINREGALO regalocompradoRelacional FINREGALO regaloprinUnario CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO 
                | ENVUELVE ABRECUENTO asignaRegalo FINREGALO regalocompradoRelacional FINREGALO regaloprinUnario CIERRACUENTO ABREREGALO CIERRAREGALO ;

//Los casos del if(elfo), else(duende) y elif(hada). if(), if(){}else{}, if()elif(){}...else{}
if_elfo ::= ELFO ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO 
		| ELFO ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO DUENDE ABREREGALO lineasDeNavidad CIERRAREGALO 
		| ELFO ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO elif_hada_duende
		| ELFO ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO elif_hada_duende DUENDE ABREREGALO lineasDeNavidad CIERRAREGALO ;

//Caso elif con varios posibles elif y otro elif else
elif_hada_duende ::= elif_hada | else_duende elif_hada ;
elif_hada ::= def_elif_hada | elif_hada def_elif_hada ;
def_elif_hada ::= HADA ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO ;
else_duende ::= DUENDE ABREREGALO lineasDeNavidad CIERRAREGALO ;


//Operaciones relacionales
// a > b,  a < b, a == b, a != b, a => b, a =< b
regalocompradoRelacional ::= exprRegalo g_merryberry exprRegalo | 
                                    exprRegalo l_slinky exprRegalo |
                                    exprRegalo e_jinglebell exprRegalo |
                                    exprRegalo ne_tinseltoes exprRegalo |
                                    exprRegalo ge_snowflake exprRegalo |
                                    exprRegalo le_candycane exprRegalo ;

//Lista de expresiones (,,), definidos recursivamente para poder tener uno o mas 
expresionesBastoncitos ::= defExprBastoncito | expresionesBastoncitos SEPARAREGALO  defExprBastoncito ;
defExprBastoncito ::= exprRegalo;

//Parametros de funciones (,,), definidos recursivamente para poder tener uno o mas 
paramBastoncitos ::= defParamBastoncito | paramBastoncitos SEPARAREGALO defParamBastoncito ;
defParamBastoncito ::= tsantaclaus PERSONA ;

//Operaciones logicas
// a ^ b, a # b, !a 
regaloManual ::= exprRegalo and_melchior exprRegalo |
				exprRegalo or_balthassar exprRegalo |
				not_gaspar exprRegalo ;

//Operaciones aritmeticas unarias --a, ++a, a++, a--
regaloprinUnario ::= QUIEN PERSONA | GRINCH PERSONA; //|


//Operaciones aritmeticas binarias a+b; a-b, a/b, a//b,a*b a**b, 
regaloprinBinario ::= exprRegalo sum_dasher exprRegalo |
					exprRegalo res_dancer exprRegalo |
					exprRegalo mul_prancer exprRegalo |
					exprRegalo div_int_vixen exprRegalo |
					exprRegalo div_float_blitzen exprRegalo |
					exprRegalo mod_comet exprRegalo |
					exprRegalo pow_cupid exprRegalo ;

