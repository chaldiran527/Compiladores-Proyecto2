// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lex.txt

/* https://www.jflex.de/manual.html */
/* JFlex example: partial Java language lexer specification */
package proyectocompi2;
import java.io.StringReader;
import java_cup.runtime.*;

/*Declaraciones y opciones*/

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int ERROR = 4;
  public static final int DECREMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\2\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\11\25\1\26\1\6\1\27\1\30\1\31\1\6\1\32"+
    "\4\12\1\33\25\12\1\34\1\35\1\36\1\37\1\40"+
    "\1\6\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\12\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\12\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\3\12\1\66\1\67\1\70\1\71\6\0\1\72\32\0"+
    "\2\6\4\12\4\6\1\12\2\6\1\0\7\6\1\12"+
    "\4\6\1\12\5\6\27\12\1\6\37\12\1\6\u01ca\12"+
    "\4\6\14\12\16\6\5\12\7\6\1\12\1\6\1\12"+
    "\21\6\160\0\5\12\1\6\2\12\2\6\4\12\1\6"+
    "\1\12\6\6\1\12\1\6\3\12\1\6\1\12\1\6"+
    "\24\12\1\6\123\12\1\6\213\12\1\6\5\0\2\6"+
    "\246\12\1\6\46\12\2\6\1\12\6\6\51\12\6\6"+
    "\1\12\1\6\55\0\1\6\1\0\1\6\2\0\1\6"+
    "\2\0\1\6\1\0\10\6\33\12\4\6\4\12\15\6"+
    "\6\0\5\6\1\12\4\6\13\0\1\6\1\0\3\6"+
    "\53\12\37\0\4\6\2\12\1\0\143\12\1\6\1\12"+
    "\10\0\1\6\6\0\2\12\2\0\1\6\4\0\2\12"+
    "\12\0\3\12\2\6\1\12\17\6\1\0\1\12\1\0"+
    "\36\12\33\0\2\6\131\12\13\0\1\12\16\6\12\0"+
    "\41\12\11\0\2\12\4\6\1\12\2\6\1\0\30\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\5\0\22\6"+
    "\31\12\3\0\4\6\13\12\5\6\30\12\1\6\6\12"+
    "\1\6\2\0\6\6\10\0\52\12\72\0\66\12\3\0"+
    "\1\12\22\0\1\12\7\0\12\12\2\0\2\6\12\0"+
    "\1\6\20\12\3\0\1\6\10\12\2\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\1\12\3\6\4\12\2\6"+
    "\1\0\1\12\7\0\2\6\2\0\2\6\3\0\1\12"+
    "\10\6\1\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\4\12\7\6\2\12\1\6\1\0\2\6\3\0"+
    "\1\6\6\12\4\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\2\12\1\6\2\12\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\12\1\6\1\12\7\6\14\0\3\12\1\0"+
    "\13\6\3\0\1\6\11\12\1\6\3\12\1\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\10\0\1\6\3\0\1\6\3\0\2\6\1\12"+
    "\17\6\2\12\2\0\2\6\12\0\1\6\1\12\7\6"+
    "\1\12\6\0\1\6\3\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\2\12\1\6\5\12"+
    "\2\6\1\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\7\6\3\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\1\6\1\12\20\6\1\0\1\12\1\6\6\12"+
    "\3\6\3\12\1\6\4\12\3\6\2\12\1\6\1\12"+
    "\1\6\2\12\3\6\2\12\3\6\3\12\3\6\14\12"+
    "\4\6\5\0\3\6\3\0\1\6\4\0\2\6\1\12"+
    "\6\6\1\0\16\6\12\0\11\6\1\12\6\6\5\0"+
    "\10\12\1\6\3\12\1\6\27\12\1\6\20\12\2\6"+
    "\1\0\1\12\7\0\1\6\3\0\1\6\4\0\7\6"+
    "\2\0\1\6\3\12\2\6\1\12\2\6\2\12\2\0"+
    "\2\6\12\0\20\6\1\12\3\0\1\6\10\12\1\6"+
    "\3\12\1\6\27\12\1\6\12\12\1\6\5\12\2\6"+
    "\1\0\1\12\7\0\1\6\3\0\1\6\4\0\7\6"+
    "\2\0\6\6\2\12\1\6\2\12\2\0\2\6\12\0"+
    "\1\6\2\12\1\0\14\6\4\0\11\12\1\6\3\12"+
    "\1\6\51\12\2\0\1\12\7\0\1\6\3\0\1\6"+
    "\4\0\1\12\5\6\3\12\1\0\7\6\3\12\2\0"+
    "\2\6\12\0\12\6\6\12\1\6\3\0\1\6\22\12"+
    "\3\6\30\12\1\6\11\12\1\6\1\12\2\6\7\12"+
    "\3\6\1\0\4\6\6\0\1\6\1\0\1\6\10\0"+
    "\6\6\12\0\2\6\2\0\15\6\60\12\1\0\2\12"+
    "\7\0\4\6\10\12\10\0\1\6\12\0\47\6\2\12"+
    "\1\6\1\12\1\6\5\12\1\6\30\12\1\6\1\12"+
    "\1\6\12\12\1\0\2\12\11\0\1\12\2\6\5\12"+
    "\1\6\1\12\1\6\7\0\1\6\12\0\2\6\4\12"+
    "\40\6\1\12\27\6\2\0\6\6\12\0\13\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\2\0\10\12\1\6"+
    "\44\12\4\6\24\0\1\6\2\0\5\12\13\0\1\6"+
    "\44\0\11\6\1\0\71\6\53\12\24\0\1\12\12\0"+
    "\6\6\6\12\4\0\4\12\3\0\1\12\3\0\2\12"+
    "\7\0\3\12\4\0\15\12\14\0\1\12\17\0\2\6"+
    "\46\12\1\6\1\12\5\6\1\12\2\6\53\12\1\6"+
    "\115\12\1\6\4\12\2\6\7\12\1\6\1\12\1\6"+
    "\4\12\2\6\51\12\1\6\4\12\2\6\41\12\1\6"+
    "\4\12\2\6\7\12\1\6\1\12\1\6\4\12\2\6"+
    "\17\12\1\6\71\12\1\6\4\12\2\6\103\12\2\6"+
    "\3\0\40\6\20\12\20\6\126\12\2\6\6\12\3\6"+
    "\u016c\12\2\6\21\12\1\6\32\12\5\6\113\12\3\6"+
    "\13\12\7\6\22\12\4\0\11\6\23\12\3\0\13\6"+
    "\22\12\2\0\14\6\15\12\1\6\3\12\1\6\2\0"+
    "\14\6\64\12\40\0\3\6\1\12\3\6\2\12\1\0"+
    "\2\6\12\0\41\6\17\0\6\6\131\12\7\6\5\12"+
    "\2\0\42\12\1\0\1\12\5\6\106\12\12\6\37\12"+
    "\1\6\14\0\4\6\14\0\12\6\12\0\36\12\2\6"+
    "\5\12\13\6\54\12\4\6\32\12\6\6\12\0\46\6"+
    "\27\12\5\0\4\6\65\12\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\12\10\6\16\0\1\6"+
    "\20\0\61\6\5\0\57\12\21\0\10\12\3\6\12\0"+
    "\21\6\11\0\14\6\3\0\36\12\15\0\2\12\12\0"+
    "\54\12\16\0\14\6\44\12\24\0\10\6\12\0\3\6"+
    "\3\12\12\0\44\12\2\6\11\12\7\6\53\12\2\6"+
    "\3\12\20\6\3\0\1\6\25\0\4\12\1\0\6\12"+
    "\1\0\2\12\3\0\1\12\5\6\300\12\100\0\26\12"+
    "\2\6\6\12\2\6\46\12\2\6\6\12\2\6\10\12"+
    "\1\6\1\12\1\6\1\12\1\6\1\12\1\6\37\12"+
    "\2\6\65\12\1\6\7\12\1\6\1\12\3\6\3\12"+
    "\1\6\7\12\3\6\4\12\2\6\6\12\4\6\15\12"+
    "\5\6\3\12\1\6\7\12\16\6\5\0\30\6\2\3"+
    "\5\0\20\6\2\12\23\6\1\12\13\6\5\0\1\6"+
    "\12\0\1\6\1\12\15\6\1\12\20\6\15\12\3\6"+
    "\41\12\17\6\15\0\4\6\1\0\3\6\14\0\21\6"+
    "\1\12\4\6\1\12\2\6\12\12\1\6\1\12\3\6"+
    "\5\12\6\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\4\12\1\6\13\12\2\6\4\12\5\6\5\12\4\6"+
    "\1\12\21\6\51\12\u0177\6\345\12\6\6\4\12\3\0"+
    "\2\12\14\6\46\12\1\6\1\12\5\6\1\12\2\6"+
    "\70\12\7\6\1\12\17\6\1\0\27\12\11\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\40\0"+
    "\57\6\1\12\325\6\3\12\31\6\11\12\6\0\1\6"+
    "\5\12\2\6\5\12\4\6\126\12\2\6\2\0\2\6"+
    "\3\12\1\6\132\12\1\6\4\12\5\6\53\12\1\6"+
    "\136\12\21\6\40\12\60\6\320\12\100\6\215\12\103\6"+
    "\56\12\2\6\15\12\3\6\20\12\12\0\2\12\24\6"+
    "\57\12\1\0\4\6\12\0\1\6\37\12\2\0\120\12"+
    "\2\0\45\6\11\12\2\6\147\12\2\6\100\12\5\6"+
    "\2\12\1\6\1\12\1\6\5\12\30\6\20\12\1\0"+
    "\3\12\1\0\4\12\1\0\27\12\5\0\4\6\1\0"+
    "\13\6\1\12\7\6\64\12\14\6\2\0\62\12\22\0"+
    "\12\6\12\0\6\6\22\0\6\12\3\6\1\12\1\6"+
    "\2\12\13\0\34\12\10\0\2\6\27\12\15\0\14\6"+
    "\35\12\3\6\4\0\57\12\16\0\16\6\1\12\12\0"+
    "\6\6\5\12\1\0\12\12\12\0\5\12\1\6\51\12"+
    "\16\0\11\6\3\12\1\0\10\12\2\0\2\6\12\0"+
    "\6\6\27\12\3\6\1\12\3\0\62\12\1\0\1\12"+
    "\3\0\2\12\2\0\5\12\2\0\1\12\1\0\1\12"+
    "\30\6\3\12\2\6\13\12\5\0\2\6\3\12\2\0"+
    "\12\6\6\12\2\6\6\12\2\6\6\12\11\6\7\12"+
    "\1\6\7\12\1\6\53\12\1\6\16\12\6\6\163\12"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\12\14\6"+
    "\27\12\4\6\61\12\4\6\u0100\3\156\12\2\6\152\12"+
    "\46\6\7\12\14\6\5\12\5\6\1\12\1\0\12\12"+
    "\1\6\15\12\1\6\5\12\1\6\1\12\1\6\2\12"+
    "\1\6\2\12\1\6\154\12\41\6\153\12\22\6\100\12"+
    "\2\6\66\12\50\6\15\12\3\6\20\0\20\6\20\0"+
    "\3\6\2\12\30\6\3\12\31\6\1\12\6\6\5\12"+
    "\1\6\207\12\2\6\1\0\4\6\1\12\13\6\12\0"+
    "\7\6\32\12\4\6\1\12\1\6\32\12\13\6\131\12"+
    "\3\6\6\12\2\6\6\12\2\6\6\12\2\6\3\12"+
    "\3\6\2\12\3\6\2\12\22\6\3\0\4\6\14\12"+
    "\1\6\32\12\1\6\23\12\1\6\2\12\1\6\17\12"+
    "\2\6\16\12\42\6\173\12\105\6\65\12\210\6\1\0"+
    "\202\6\35\12\3\6\61\12\17\6\1\0\37\6\40\12"+
    "\15\6\36\12\5\6\46\12\5\0\5\6\36\12\2\6"+
    "\44\12\4\6\10\12\1\6\5\12\52\6\236\12\2\6"+
    "\12\0\6\6\44\12\4\6\44\12\4\6\50\12\10\6"+
    "\64\12\14\6\13\12\1\6\17\12\1\6\7\12\1\6"+
    "\2\12\1\6\13\12\1\6\17\12\1\6\7\12\1\6"+
    "\2\12\103\6\67\12\11\6\26\12\12\6\10\12\30\6"+
    "\6\12\1\6\52\12\1\6\11\12\105\6\6\12\2\6"+
    "\1\12\1\6\54\12\1\6\2\12\3\6\1\12\2\6"+
    "\27\12\12\6\27\12\11\6\37\12\101\6\23\12\1\6"+
    "\2\12\12\6\26\12\12\6\32\12\106\6\70\12\6\6"+
    "\2\12\100\6\1\12\3\0\1\6\2\0\5\6\4\0"+
    "\4\12\1\6\3\12\1\6\35\12\2\6\3\0\4\6"+
    "\1\0\40\6\35\12\3\6\35\12\43\6\10\12\1\6"+
    "\34\12\2\0\31\6\66\12\12\6\26\12\12\6\23\12"+
    "\15\6\22\12\156\6\111\12\67\6\63\12\15\6\63\12"+
    "\15\6\44\12\4\0\10\6\12\0\u0146\6\52\12\1\6"+
    "\2\0\3\6\2\12\113\6\3\0\35\12\12\6\1\12"+
    "\10\6\26\12\13\0\37\6\22\12\4\0\52\6\25\12"+
    "\33\6\27\12\11\6\3\0\65\12\17\0\37\6\13\0"+
    "\2\12\2\0\1\12\11\6\4\0\55\12\13\0\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\2\6\31\12\7\6"+
    "\12\0\6\6\3\0\44\12\16\0\1\6\12\0\4\6"+
    "\1\12\2\0\1\12\10\6\43\12\1\0\2\6\1\12"+
    "\11\6\3\0\60\12\16\0\4\12\4\6\4\0\1\6"+
    "\14\0\1\12\1\6\1\12\43\6\22\12\1\6\31\12"+
    "\14\0\6\6\1\0\2\12\1\0\76\6\7\12\1\6"+
    "\1\12\1\6\4\12\1\6\17\12\1\6\12\12\7\6"+
    "\57\12\14\0\5\6\12\0\6\6\4\0\1\6\10\12"+
    "\2\6\2\12\2\6\26\12\1\6\7\12\1\6\2\12"+
    "\1\6\5\12\1\6\2\0\1\12\7\0\2\6\2\0"+
    "\2\6\3\0\2\6\1\12\6\6\1\0\5\6\5\12"+
    "\2\0\2\6\7\0\3\6\5\0\213\6\65\12\22\0"+
    "\4\12\5\6\12\0\4\6\1\0\3\12\36\6\60\12"+
    "\24\0\2\12\1\6\1\12\10\6\12\0\246\6\57\12"+
    "\7\0\2\6\11\0\27\6\4\12\2\0\42\6\60\12"+
    "\21\0\3\6\1\12\13\6\12\0\46\6\53\12\15\0"+
    "\1\12\7\6\12\0\66\6\33\12\2\6\17\0\4\6"+
    "\12\0\6\6\7\12\271\6\54\12\17\0\145\6\100\12"+
    "\12\0\25\6\10\12\2\6\1\12\2\6\10\12\1\6"+
    "\2\12\1\6\30\12\6\0\1\6\2\0\2\6\4\0"+
    "\1\12\1\0\1\12\2\0\14\6\12\0\106\6\10\12"+
    "\2\6\47\12\7\0\2\6\7\0\1\12\1\6\1\12"+
    "\1\0\33\6\1\12\12\0\50\12\7\0\1\12\4\0"+
    "\10\6\1\0\10\6\1\12\13\0\56\12\20\0\3\6"+
    "\1\12\22\6\111\12\7\6\11\12\1\6\45\12\10\0"+
    "\1\6\10\0\1\12\17\6\12\0\30\6\36\12\2\6"+
    "\26\0\1\6\16\0\111\6\7\12\1\6\2\12\1\6"+
    "\46\12\6\0\3\6\1\0\1\6\2\0\1\6\7\0"+
    "\1\12\1\0\10\6\12\0\6\6\6\12\1\6\2\12"+
    "\1\6\40\12\5\0\1\6\2\0\1\6\5\0\1\12"+
    "\7\6\12\0\u0136\6\23\12\4\0\11\6\2\0\1\12"+
    "\1\0\15\12\1\6\42\12\7\0\3\6\5\0\15\6"+
    "\12\0\126\6\1\12\54\6\4\12\37\6\232\12\146\6"+
    "\157\12\21\6\304\12\u014c\6\141\12\17\6\60\12\21\0"+
    "\6\12\17\0\252\6\107\12\271\6\71\12\7\6\37\12"+
    "\1\6\12\0\6\6\117\12\1\6\12\0\6\6\36\12"+
    "\2\6\5\0\13\6\60\12\7\0\11\6\4\12\14\6"+
    "\12\0\11\6\25\12\5\6\23\12\260\6\100\12\200\6"+
    "\113\12\4\6\1\0\1\12\67\0\7\6\4\0\15\12"+
    "\100\6\2\12\1\6\1\12\1\0\13\6\2\0\16\6"+
    "\370\12\10\6\326\12\52\6\11\12\u01e7\6\4\12\1\6"+
    "\7\12\1\6\2\12\1\6\43\12\17\6\1\12\35\6"+
    "\3\12\2\6\1\12\16\6\4\12\10\6\u018c\12\4\6"+
    "\153\12\5\6\15\12\3\6\11\12\7\6\12\12\3\6"+
    "\2\0\1\6\4\0\134\6\56\0\2\6\27\0\u011e\6"+
    "\5\0\3\6\26\0\2\6\7\0\36\6\4\0\224\6"+
    "\3\0\273\6\125\12\1\6\107\12\1\6\2\12\2\6"+
    "\1\12\2\6\2\12\2\6\4\12\1\6\14\12\1\6"+
    "\1\12\1\6\7\12\1\6\101\12\1\6\4\12\2\6"+
    "\10\12\1\6\7\12\1\6\34\12\1\6\4\12\1\6"+
    "\5\12\1\6\1\12\3\6\7\12\1\6\u0154\12\2\6"+
    "\31\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\10\12\2\6\151\0\4\6"+
    "\62\0\10\6\1\0\16\6\1\0\26\6\5\0\1\6"+
    "\17\0\120\6\37\12\6\6\6\12\325\6\7\0\1\6"+
    "\21\0\2\6\7\0\1\6\2\0\1\6\5\0\5\6"+
    "\76\12\41\6\1\0\160\6\55\12\3\6\7\0\7\12"+
    "\2\6\12\0\4\6\1\12\u0141\6\36\12\1\0\21\6"+
    "\54\12\16\0\5\6\1\12\320\6\34\12\16\0\346\6"+
    "\7\12\1\6\4\12\1\6\2\12\1\6\17\12\1\6"+
    "\305\12\13\6\7\0\51\6\104\12\7\0\1\12\4\6"+
    "\12\0\u0156\6\1\12\117\6\4\12\1\6\33\12\1\6"+
    "\2\12\1\6\1\12\2\6\1\12\1\6\12\12\1\6"+
    "\4\12\1\6\1\12\1\6\1\12\6\6\1\12\4\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\3\12\1\6"+
    "\2\12\1\6\1\12\2\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\2\12\1\6"+
    "\1\12\2\6\4\12\1\6\7\12\1\6\4\12\1\6"+
    "\4\12\1\6\1\12\1\6\12\12\1\6\21\12\5\6"+
    "\3\12\1\6\5\12\1\6\21\12\u0134\6\12\0\6\6"+
    "\340\12\40\6\72\12\6\6\336\12\2\6\u0182\12\16\6"+
    "\u0131\12\37\6\36\12\342\6\113\12\5\6\u0160\12\121\6"+
    "\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\0\1\2\1\3\1\4\2\3"+
    "\1\5\1\6\1\7\1\10\1\2\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\20\1\21\1\22\1\2"+
    "\1\23\1\3\1\24\1\25\1\26\21\10\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\4\1\1"+
    "\1\37\1\1\1\0\1\40\1\41\1\42\2\20\1\43"+
    "\1\2\2\1\1\44\1\45\1\46\1\47\1\50\5\10"+
    "\1\51\5\10\1\52\13\10\1\53\1\54\1\55\1\56"+
    "\2\57\2\0\2\2\1\1\1\20\1\0\1\20\1\10"+
    "\1\60\7\10\1\61\1\10\1\62\13\10\2\20\1\1"+
    "\1\0\3\10\1\63\1\64\1\65\4\10\1\66\1\10"+
    "\1\67\3\10\1\70\1\10\1\71\1\10\1\1\1\0"+
    "\2\10\1\72\1\73\1\74\1\10\1\75\1\76\3\10"+
    "\1\77\1\100\3\10\1\101\1\102\1\103\1\10\1\104"+
    "\1\10\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\354\0\354"+
    "\0\u0162\0\u019d\0\u0127\0\u0127\0\u01d8\0\u0213\0\u0127\0\u0127"+
    "\0\u024e\0\u0289\0\u0127\0\u02c4\0\u02ff\0\u033a\0\u0375\0\354"+
    "\0\u03b0\0\u03eb\0\354\0\u0426\0\u0127\0\u0127\0\354\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u0127\0\u0127\0\u0127\0\354\0\u0127\0\u0127\0\u0127\0\u084c"+
    "\0\u0127\0\u0887\0\354\0\u0127\0\u08c2\0\u08fd\0\354\0\u0127"+
    "\0\u0127\0\u0938\0\u0973\0\354\0\u09ae\0\u09e9\0\u0a24\0\354"+
    "\0\354\0\354\0\354\0\354\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u01d8\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u01d8"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0127\0\u0127\0\u0127\0\u0127\0\354"+
    "\0\u0127\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u01d8\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u01d8\0\u12e6\0\u01d8\0\u1321\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f"+
    "\0\u15aa\0\u1098\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u170c\0\u1747\0\u1782\0\u17bd\0\u01d8\0\u17f8"+
    "\0\u01d8\0\u1833\0\u186e\0\u18a9\0\u01d8\0\u18e4\0\u01d8\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u01d8\0\u01d8\0\u01d8\0\u1a46"+
    "\0\u01d8\0\u01d8\0\u1a81\0\u1abc\0\u1af7\0\u01d8\0\u01d8\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u01d8\0\u01d8\0\u01d8\0\u1be3\0\u01d8\0\u1c1e"+
    "\0\u01d8\0\u01d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\5\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\15\1\35\1\5\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\15\1\47"+
    "\1\15\1\50\1\51\2\15\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\7"+
    "\2\65\1\66\2\65\1\66\2\65\1\67\24\65\1\70"+
    "\35\65\1\7\2\71\2\7\1\71\1\7\3\71\2\7"+
    "\2\71\1\7\3\71\12\7\1\71\1\7\1\71\1\7"+
    "\1\72\25\7\3\71\2\7\73\66\1\73\2\0\2\73"+
    "\1\0\1\73\3\0\2\73\2\0\1\73\3\0\12\73"+
    "\1\0\1\73\1\0\27\73\3\0\2\73\75\0\1\6"+
    "\120\0\1\74\42\0\1\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\26\15\3\0"+
    "\1\73\1\15\1\75\1\76\1\0\2\75\1\0\1\75"+
    "\3\76\2\75\2\76\1\75\3\76\12\75\1\76\1\75"+
    "\1\76\27\75\3\76\2\75\1\73\2\0\2\73\1\0"+
    "\1\73\3\0\2\73\2\0\1\77\3\0\12\73\1\0"+
    "\1\73\1\0\27\73\3\0\2\73\17\0\1\100\74\0"+
    "\1\101\2\0\1\102\1\103\45\0\1\73\2\0\2\73"+
    "\1\0\1\73\3\0\2\73\2\0\1\73\3\0\1\73"+
    "\1\104\10\73\1\0\1\73\1\0\1\73\1\105\25\73"+
    "\3\0\3\73\2\0\2\73\1\0\1\73\3\0\2\73"+
    "\2\0\1\73\3\0\1\106\10\73\1\107\1\0\1\73"+
    "\1\0\6\73\1\107\20\73\3\0\3\73\2\0\2\73"+
    "\1\0\1\73\3\0\2\73\2\0\1\73\3\0\1\106"+
    "\1\73\2\27\5\73\1\107\1\0\1\73\1\0\6\73"+
    "\1\107\20\73\3\0\3\73\2\0\2\73\1\0\1\73"+
    "\3\0\2\73\2\0\1\73\3\0\6\73\1\110\3\73"+
    "\1\0\1\73\1\0\27\73\3\0\3\73\2\0\2\73"+
    "\1\0\1\73\3\0\2\73\2\0\1\73\3\0\5\73"+
    "\1\111\1\112\1\113\2\73\1\0\1\73\1\0\27\73"+
    "\3\0\2\73\2\34\1\6\2\34\1\11\65\34\1\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\1\73\1\114\2\15\5\73\1\15\1\0"+
    "\1\73\1\0\1\73\26\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\2\15\1\115\15\15\1\116\5\15\3\0\1\73"+
    "\2\15\2\0\2\73\1\0\1\73\3\0\1\15\1\73"+
    "\2\0\1\73\3\0\2\73\2\15\5\73\1\15\1\0"+
    "\1\73\1\0\1\73\16\15\1\117\1\15\1\120\5\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\10\15\1\121\15\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\16\15\1\122\7\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\13\15\1\123\12\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\1\15\1\124\11\15"+
    "\1\125\2\15\1\126\4\15\1\127\2\15\3\0\1\73"+
    "\2\15\2\0\2\73\1\0\1\73\3\0\1\15\1\73"+
    "\2\0\1\73\3\0\2\73\2\15\5\73\1\15\1\0"+
    "\1\73\1\0\1\73\6\15\1\130\6\15\1\131\10\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\16\15\1\132\7\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\1\15\1\133\24\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\20\15\1\134\5\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\5\15\1\135\20\15"+
    "\3\0\1\73\2\15\2\0\2\73\1\0\1\73\3\0"+
    "\1\15\1\73\2\0\1\73\3\0\2\73\2\15\5\73"+
    "\1\15\1\0\1\73\1\0\1\73\22\15\1\136\2\15"+
    "\1\137\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\20\15\1\140"+
    "\5\15\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\15\15\1\141"+
    "\10\15\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\16\15\1\142"+
    "\7\15\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\10\15\1\143"+
    "\15\15\3\0\1\73\1\15\10\0\1\144\44\0\1\145"+
    "\2\0\1\146\1\0\1\147\10\0\1\73\2\0\2\73"+
    "\1\0\1\73\3\0\2\73\2\0\1\73\3\0\1\73"+
    "\1\114\10\73\1\0\1\73\1\0\27\73\3\0\3\73"+
    "\2\0\2\73\1\0\1\73\3\0\1\73\1\150\2\0"+
    "\1\73\3\0\12\73\1\0\1\73\1\0\27\73\3\0"+
    "\2\73\13\0\1\151\101\0\1\152\10\0\1\153\11\0"+
    "\1\153\47\0\1\152\1\0\2\103\5\0\1\153\11\0"+
    "\1\153\25\0\1\154\2\155\2\154\1\155\1\154\3\155"+
    "\2\154\2\155\1\154\3\155\12\154\1\155\1\154\1\155"+
    "\1\154\1\156\25\154\3\155\2\154\1\73\2\0\2\73"+
    "\1\0\1\73\3\0\2\73\2\0\1\73\3\0\2\73"+
    "\2\157\6\73\1\0\1\73\1\0\27\73\3\0\3\73"+
    "\2\0\2\73\1\0\1\73\3\0\2\73\2\0\1\73"+
    "\2\0\1\160\2\73\2\161\6\73\1\0\1\73\1\0"+
    "\27\73\3\0\2\73\1\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\21\15\1\162"+
    "\4\15\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\20\15\1\163"+
    "\5\15\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\16\15\1\164"+
    "\7\15\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\5\15\1\165"+
    "\20\15\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\1\15\1\166"+
    "\24\15\3\0\1\73\2\15\2\0\2\73\1\0\1\73"+
    "\3\0\1\15\1\73\2\0\1\73\3\0\2\73\2\15"+
    "\5\73\1\15\1\0\1\73\1\0\1\73\11\15\1\167"+
    "\7\15\1\170\4\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\13\15\1\171\12\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\16\15\1\172\7\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\20\15\1\173\5\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\15\15\1\174\10\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\22\15\1\175\3\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\3\15\1\176\22\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\11\15\1\177\14\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\11\15\1\200\14\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\1\15\1\201\20\15\1\202\3\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\20\15\1\203\5\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\11\15\1\204\14\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\23\15\1\205\2\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\22\15\1\206\3\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\11\15\1\207\14\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\11\15\1\210\14\15\3\0\1\73\1\15"+
    "\24\0\2\211\66\0\1\160\2\0\2\212\45\0\1\154"+
    "\2\155\2\154\1\155\1\154\3\155\2\154\2\155\1\154"+
    "\3\155\12\154\1\155\1\154\1\155\1\154\1\213\25\154"+
    "\3\155\2\154\40\155\1\214\32\155\1\73\2\0\2\73"+
    "\1\0\1\73\3\0\2\73\2\0\1\73\3\0\1\73"+
    "\1\10\10\73\1\0\1\73\1\0\1\73\1\156\25\73"+
    "\3\0\3\73\2\0\2\73\1\0\1\73\3\0\2\73"+
    "\2\0\1\73\3\0\2\73\2\157\5\73\1\107\1\0"+
    "\1\73\1\0\6\73\1\107\20\73\3\0\2\73\24\0"+
    "\2\212\45\0\1\73\2\0\2\73\1\0\1\73\3\0"+
    "\2\73\2\0\1\73\3\0\2\73\2\161\6\73\1\0"+
    "\1\73\1\0\27\73\3\0\2\73\1\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\22\15\1\215\3\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\13\15\1\216\12\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\1\15\1\217\24\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\20\15\1\220\5\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\6\15\1\221\17\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\5\15\1\222\20\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\21\15\1\223\4\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\1\15\1\224\24\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\3\15\1\225\22\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\1\15\1\226\24\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\15\15\1\227\10\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\15\15\1\230\10\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\4\15\1\231\21\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\23\15\1\232\2\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\11\15\1\233\14\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\22\15\1\234\3\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\5\15\1\235\20\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\11\15\1\236\14\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\4\15\1\237\21\15\3\0\1\73\2\15\2\0\2\73"+
    "\1\0\1\73\3\0\1\15\1\73\2\0\1\73\3\0"+
    "\2\73\2\15\5\73\1\15\1\0\1\73\1\0\1\73"+
    "\13\15\1\240\12\15\3\0\1\73\1\15\24\0\2\211"+
    "\5\0\1\153\11\0\1\153\25\0\1\241\2\242\2\241"+
    "\1\242\1\241\3\242\2\241\2\242\1\241\3\242\1\241"+
    "\1\10\10\241\1\242\1\241\1\242\1\241\1\213\25\241"+
    "\3\242\2\241\23\242\1\6\14\242\1\214\32\242\1\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\20\15\1\243\5\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\5\15\1\244\20\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\12\15\1\245\13\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\5\15\1\246\20\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\22\15\1\247\3\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\22\15\1\250\3\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\13\15\1\251\12\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\22\15\1\252\3\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\20\15\1\253\5\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\15\15\1\254\10\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\3\15\1\255\22\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\13\15\1\256\12\15\3\0\1\73\2\15"+
    "\2\0\2\73\1\0\1\73\3\0\1\15\1\73\2\0"+
    "\1\73\3\0\2\73\2\15\5\73\1\15\1\0\1\73"+
    "\1\0\1\73\5\15\1\257\20\15\3\0\1\73\1\15"+
    "\1\241\2\242\2\241\1\242\1\241\3\242\2\241\2\242"+
    "\1\241\3\242\12\241\1\242\1\241\1\242\1\241\1\213"+
    "\25\241\3\242\2\241\40\242\1\214\32\242\1\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\1\15\1\260\24\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\1\15\1\261\24\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\11\15\1\262\14\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\15\15\1\263\10\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\7\15\1\264\16\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\10\15\1\265\15\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\3\15\1\266\22\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\15\15\1\267\10\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\16\15\1\270\7\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\22\15\1\271\3\15\3\0\1\73\2\15\2\0"+
    "\2\73\1\0\1\73\3\0\1\15\1\73\2\0\1\73"+
    "\3\0\2\73\2\15\5\73\1\15\1\0\1\73\1\0"+
    "\1\73\15\15\1\272\10\15\3\0\1\73\1\15";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7257];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\1\0\1\1\1\11\4\1\2\11"+
    "\2\1\2\11\2\1\1\11\11\1\2\11\22\1\3\11"+
    "\1\1\3\11\1\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\2\11\42\1\4\11\1\1\1\11\2\0\4\1"+
    "\1\0\33\1\1\0\25\1\1\0\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //Variable string para imprimir los contenidos de los tokens encontrados
    StringBuffer string = new StringBuffer();
    private int errorCount = 0;

    //Definicion de symbol predefinidos por el ejemplo proporcionado por jflex
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    //Método para manejar errores y recuperación
    private void handleError(String message) {
        System.err.println("Error: " + message + " en la línea " + yyline + ", columna " + yycolumn);
        errorCount++;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { // Ignorar cualquier otro carácter durante la recuperación
    yycolumn += yylength();
    return symbol(sym.ERROR);
            }
          // fall through
          case 71: break;
          case 2:
            { return symbol(sym.ERROR);
            }
          // fall through
          case 72: break;
          case 3:
            { /* ignore */
            }
          // fall through
          case 73: break;
          case 4:
            { yycolumn++;
        return symbol(sym.ERROR);
            }
          // fall through
          case 74: break;
          case 5:
            { return symbol(sym.not_gaspar);
            }
          // fall through
          case 75: break;
          case 6:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 76: break;
          case 7:
            { return symbol(sym.or_balthassar);
            }
          // fall through
          case 77: break;
          case 8:
            { return symbol(sym.PERSONA, yytext());
            }
          // fall through
          case 78: break;
          case 9:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 79: break;
          case 10:
            { return symbol(sym.CIERRACUENTO);
            }
          // fall through
          case 80: break;
          case 11:
            { return symbol(sym.mul_prancer);
            }
          // fall through
          case 81: break;
          case 12:
            { return symbol(sym.sum_dasher);
            }
          // fall through
          case 82: break;
          case 13:
            { return symbol(sym.SEPARAREGALO);
            }
          // fall through
          case 83: break;
          case 14:
            { return symbol(sym.res_dancer);
            }
          // fall through
          case 84: break;
          case 15:
            { return symbol(sym.div_float_blitzen);
            }
          // fall through
          case 85: break;
          case 16:
            { return symbol(sym.l_float_padrenavidad, yytext());
            }
          // fall through
          case 86: break;
          case 17:
            { return symbol(sym.LUCES);
            }
          // fall through
          case 87: break;
          case 18:
            { return symbol(sym.l_slinky);
            }
          // fall through
          case 88: break;
          case 19:
            { return symbol(sym.g_merryberry);
            }
          // fall through
          case 89: break;
          case 20:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 90: break;
          case 21:
            { return symbol(sym.CIERRAEMPAQUE);
            }
          // fall through
          case 91: break;
          case 22:
            { return symbol(sym.and_melchior);
            }
          // fall through
          case 92: break;
          case 23:
            { return symbol(sym.ABREREGALO);
            }
          // fall through
          case 93: break;
          case 24:
            { return symbol(sym.FINREGALO);
            }
          // fall through
          case 94: break;
          case 25:
            { return symbol(sym.CIERRAREGALO);
            }
          // fall through
          case 95: break;
          case 26:
            { return symbol(sym.mod_comet);
            }
          // fall through
          case 96: break;
          case 27:
            { string.append( yytext() );
            }
          // fall through
          case 97: break;
          case 28:
            { yycolumn++;
                                    return symbol(sym.ERROR);
            }
          // fall through
          case 98: break;
          case 29:
            { yybegin(YYINITIAL); 
                                    return symbol(sym.l_string_nicolas, 
                                    ("\"" + string.toString() + "\""));
            }
          // fall through
          case 99: break;
          case 30:
            { string.append('\\');
            }
          // fall through
          case 100: break;
          case 31:
            { return symbol(sym.ne_tinseltoes);
            }
          // fall through
          case 101: break;
          case 32:
            { return symbol(sym.pow_cupid);
            }
          // fall through
          case 102: break;
          case 33:
            { return symbol(sym.GRINCH);
            }
          // fall through
          case 103: break;
          case 34:
            { return symbol(sym.QUIEN);
            }
          // fall through
          case 104: break;
          case 35:
            { return symbol(sym.div_int_vixen);
            }
          // fall through
          case 105: break;
          case 36:
            { return symbol(sym.ENTREGA);
            }
          // fall through
          case 106: break;
          case 37:
            { return symbol(sym.le_candycane);
            }
          // fall through
          case 107: break;
          case 38:
            { return symbol(sym.e_jinglebell);
            }
          // fall through
          case 108: break;
          case 39:
            { return symbol(sym.ge_snowflake);
            }
          // fall through
          case 109: break;
          case 40:
            { // Fin de comentario no encontrado, se intenta recuperar
    yybegin(YYINITIAL);
    yycolumn += 2; // Avanzar dos caracteres para evitar un bucle infinito
    return symbol(sym.ERROR);
            }
          // fall through
          case 110: break;
          case 41:
            { return symbol(sym.HACE);
            }
          // fall through
          case 111: break;
          case 42:
            { return symbol(sym.ELFO);
            }
          // fall through
          case 112: break;
          case 43:
            { string.append('\"');
            }
          // fall through
          case 113: break;
          case 44:
            { string.append('\n');
            }
          // fall through
          case 114: break;
          case 45:
            { string.append('\r');
            }
          // fall through
          case 115: break;
          case 46:
            { string.append('\t');
            }
          // fall through
          case 116: break;
          case 47:
            { return symbol(sym.l_MINIREGALO, yytext());
            }
          // fall through
          case 117: break;
          case 48:
            { return symbol(sym.t_arr_noel);
            }
          // fall through
          case 118: break;
          case 49:
            { return symbol(sym.ENVUELVE);
            }
          // fall through
          case 119: break;
          case 50:
            { return symbol(sym.t_int_sinterklass);
            }
          // fall through
          case 120: break;
          case 51:
            { return symbol(sym.t_char_dedmoroz);
            }
          // fall through
          case 121: break;
          case 52:
            { return symbol(sym.HADA);
            }
          // fall through
          case 122: break;
          case 53:
            { return symbol(sym.DUENDE);
            }
          // fall through
          case 123: break;
          case 54:
            { return symbol(sym.ARBOL);
            }
          // fall through
          case 124: break;
          case 55:
            { return symbol(sym.ESCUCHA);
            }
          // fall through
          case 125: break;
          case 56:
            { return symbol(sym.l_tPAPANOEL);
            }
          // fall through
          case 126: break;
          case 57:
            { return symbol(sym.SINREGALO);
            }
          // fall through
          case 127: break;
          case 58:
            { return symbol(sym.CORTA);
            }
          // fall through
          case 128: break;
          case 59:
            { return symbol(sym.l_fPAPANOEL);
            }
          // fall through
          case 129: break;
          case 60:
            { return symbol(sym.t_float_santa);
            }
          // fall through
          case 130: break;
          case 61:
            { return symbol(sym.NATIVIDAD);
            }
          // fall through
          case 131: break;
          case 62:
            { return symbol(sym.NARRA);
            }
          // fall through
          case 132: break;
          case 63:
            { return symbol(sym.REVISA);
            }
          // fall through
          case 133: break;
          case 64:
            { return symbol(sym.ESPERARASANTA);
            }
          // fall through
          case 134: break;
          case 65:
            { return symbol(sym.RETORNAREGALO);
            }
          // fall through
          case 135: break;
          case 66:
            { return symbol(sym.t_string_nicolas);
            }
          // fall through
          case 136: break;
          case 67:
            { return symbol(sym.TRINEO);
            }
          // fall through
          case 137: break;
          case 68:
            { return symbol(sym.t_bool_colacho);
            }
          // fall through
          case 138: break;
          case 69:
            { return symbol(sym.NAVIDAD);
            }
          // fall through
          case 139: break;
          case 70:
            { return symbol(sym.FESTIVAL);
            }
          // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
