/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package proyectocompi2;
import java_cup.runtime.*;

//Acciones predefinidas por el codigo proporcionado en la pagina de CUP
action code {:
    public void hola(){
        System.out.println("Hola");
    }

    public void adios(){
        System.out.println("Adios");
    }
:}

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

/* Se define la manera en que se conecta al scanner */
init with {: :};
scan with {: return lex.next_token(); :};

//Terminales de parentesis y llaves
terminal ABREREGALO, CIERRAREGALO, ABREEMPAQUE, CIERRAEMPAQUE, ABRECUENTO, CIERRACUENTO, SEPARAREGALO;

//Terminales de tipos
terminal t_float_santa, t_bool_colacho, t_string_nicolas, l_MINIREGALO, l_int_dedmoroz, t_arr_noel, t_int_sinterklass, l_float_padrenavidad;//

//Terminal de positivos enteros no cero


//Terminales relacionales
terminal e_jinglebell, ne_tinseltoes, g_merryberry, l_slinky, ge_snowflake, le_candycane;

//Terminal de finalizador
terminal FINREGALO;

//Terminales aritmeticos unarios de  decremento e incremento
terminal QUIEN, GRINCH;

//Terminales aritmeticos binarios
terminal sum_dasher, res_dancer, mul_prancer, div_int_vixen, div_float_blitzen, mod_comet, pow_cupid;

//Terminales operadores logicos
terminal not_gaspar, and_melchior, or_balthassar, l_fPAPANOEL, l_tPAPANOEL;

//Terminales estructuras de control (if, elif, else, for, do, until, return, break, while, switch)
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA, ESPERARASANTA, TRINEO;

//Terminales de identificador, entrega, return y ERROR
terminal PERSONA, NAVIDAD, INTEGER_LITERAL, ENTREGA, RETORNAREGALO, SINREGALO, FESTIVAL, LUCES, ARBOL, t_char_dedmoroz, l_string_nicolas, NATIVIDAD, ERROR;


//Terminales de lectura y escritura
terminal NARRA, ESCUCHA;

//No terminales palabras reservadas y tipos de datos 
non terminal tsantaclaus, tlsantaclaus; 

//No terminales de funciones
non terminal bolsaNavidena, bolsaNavidenaAux, defBolsaNavidena, bolsasNavidenas, codigoBolsaNavidena;

//No terminales de lineas y sentencias de codigo 
non terminal lineasDeNavidad, auxLineasDeNavidad, creaRegalo; 

//No terminales de expresiones y asignaciones
non terminal exprRegalo, regaloManual, regalocompradoRelacional;

/* No terminal Inicial */
non terminal navidad; 


/*Definicion del orden de las precedencias*/

//precedence left ENTREGA; // a > b,  a < b, a == b, a != b, a => b, a =< b
/*
precedence left g_merryberry,
                l_slinky,
                e_jinglebell,
                ne_tinseltoes,
                ge_snowflake,
                le_candycane;
*/
precedence left le_candycane,
            ge_snowflake,
            ne_tinseltoes,
            e_jinglebell,
            l_slinky,
            g_merryberry;

precedence left and_melchior;
precedence left or_balthassar;
precedence left not_gaspar;


start with navidad;

//Simbolo inicial
navidad ::= {:
    System.out.println("\nNavidad.");
  :}  bolsaNavidena;

bolsaNavidena ::=  {:
    System.out.println("\nBolsa Navidena.");
  :}  bolsaNavidenaAux;

//Llamada recursiva para llamar 1 o mas funciones 
bolsaNavidenaAux ::= defBolsaNavidena | bolsaNavidenaAux defBolsaNavidena ;


//Definicion del tipo y llamado al codigo dentro de la funcion
defBolsaNavidena ::= bolsasNavidenas codigoBolsaNavidena ;

//Se definen tipos de funciones: main, tipo sin parametros y tipo con parametros 
bolsasNavidenas ::= FESTIVAL t_int_sinterklass ARBOL ABRECUENTO CIERRACUENTO 
					| FESTIVAL tsantaclaus PERSONA ABRECUENTO CIERRACUENTO  
					; //| FESTIVAL tsantaclaus PERSONA ABRECUENTO paramBastoncitos CIERRACUENTO ;


//No terminal de palabras reservadas para Tipos de datos
tsantaclaus ::= 
	t_int_sinterklass:t {: RESULT = t; :} |
	t_float_santa:t {: RESULT = t; :}  |
	t_string_nicolas:t {: RESULT = t; :}  |
	t_bool_colacho:t {: RESULT = t; :}  |
	t_char_dedmoroz:t {: RESULT = t; :} ;


//No terminal de literales
tlsantaclaus ::=
	l_int_dedmoroz:l {: RESULT = l; :}  |
	l_float_padrenavidad:l {: RESULT = l; :}  |
	l_string_nicolas:l {: RESULT = l; :}  | 
	l_MINIREGALO:l {: RESULT = l; :}  |   
	l_tPAPANOEL:l {: RESULT = l; :}  | 
	l_fPAPANOEL:l {: RESULT = l; :} ;  

//Cuerpo de la funcion con las lineas de codigo entre corchetes {...}
codigoBolsaNavidena ::= ABREREGALO lineasDeNavidad CIERRAREGALO ; 


//Definicion recursiva para poder llamar varias lineas de Codigo
lineasDeNavidad ::= auxLineasDeNavidad | lineasDeNavidad auxLineasDeNavidad ;

//Distintos tipos de lineas que se pueden utilizar dentro de funciones incluyendo estructuras de control y asignaciones
auxLineasDeNavidad ::= creaRegalo FINREGALO 
                                | RETORNAREGALO tlsantaclaus FINREGALO;

//Creacion, llamados y asignaciones a variables, incluyendo arreglos
//local int var; local int var = 2; local int arreglo [10]
creaRegalo ::= NATIVIDAD tsantaclaus PERSONA | NATIVIDAD tsantaclaus PERSONA ENTREGA exprRegalo
                | PERSONA ENTREGA exprRegalo | NATIVIDAD tsantaclaus PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE
                | NATIVIDAD tsantaclaus PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE ENTREGA exprRegalo 
                | PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE ENTREGA exprRegalo 
                | PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE ; // PERSONA

//Tipos de expresiones presentes en el lenguaje, incluyendo literales, asignaciones, multiples expresiones en parentesis 
//expresiones aritmeticas unarias/binarias, logicas, relacionales y llamados a funciones
exprRegalo ::=  tlsantaclaus | regaloManual;

//Operaciones relacionales
// a > b,  a < b, a == b, a != b, a => b, a =< b
regalocompradoRelacional ::= exprRegalo g_merryberry exprRegalo | 
                                    exprRegalo l_slinky exprRegalo |
                                    exprRegalo e_jinglebell exprRegalo |
                                    exprRegalo ne_tinseltoes exprRegalo |
                                    exprRegalo ge_snowflake exprRegalo |
                                    exprRegalo le_candycane exprRegalo ;

//Operaciones logicas
// a ^ b, a # b, !a 
regaloManual ::= exprRegalo and_melchior exprRegalo |
				exprRegalo or_balthassar exprRegalo |
				not_gaspar exprRegalo ;


